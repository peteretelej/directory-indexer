name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Fast checks first
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache
            .tsbuildinfo
          key: typescript-${{ runner.os }}-${{ hashFiles('**/tsconfig.json', '**/package-lock.json') }}
          restore-keys: |
            typescript-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: dist/
          key: build-${{ github.sha }}
          restore-keys: |
            build-

  # Unit tests - no external services needed
  test-unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: ["18", "20"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: dist/
          key: build-${{ github.sha }}
          restore-keys: |
            build-

      - name: Install dependencies
        run: npm ci

      - name: Build if not cached (Windows)
        run: |
          if (!(Test-Path "dist")) {
            Write-Host "Build artifacts not found, building..."
            npm run build
          } else {
            Write-Host "Build artifacts found in cache"
          }
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Build if not cached (Unix)
        run: |
          if [ ! -d "dist" ]; then
            echo "Build artifacts not found, building..."
            npm run build
          else
            echo "Build artifacts found in cache"
          fi
        if: runner.os != 'Windows'

      - name: Run unit tests
        run: npm run test:unit

  # Integration tests with coverage - need services (conditional)
  test-integration:
    name: Integration Tests & Coverage
    runs-on: ubuntu-latest
    needs: lint
    # Only run integration tests on main branch, PRs to main, or when forced
    if: >
      github.event_name == 'push' && github.ref == 'refs/heads/main' ||
      github.event_name == 'pull_request' && github.base_ref == 'main' ||
      contains(github.event.head_commit.message, '[integration]') ||
      contains(github.event.pull_request.title, '[integration]')

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: dist/
          key: build-${{ github.sha }}
          restore-keys: |
            build-

      - name: Cache Docker images and Ollama models
        uses: actions/cache@v4
        with:
          path: |
            /tmp/docker-cache
            /tmp/ollama-models
          key: integration-cache-${{ hashFiles('.github/workflows/ci.yml') }}-v2
          restore-keys: |
            integration-cache-

      - name: Install dependencies
        run: npm ci

      - name: Setup services for integration tests
        run: |
          # Create directories for caching
          mkdir -p /tmp/docker-cache /tmp/ollama-models

          # Pull Docker images (will use Docker's built-in layer cache)
          echo "Pulling Docker images..."
          docker pull qdrant/qdrant:v1.11.0 &
          docker pull ollama/ollama:0.3.12 &
          wait
          echo "✅ Docker images ready"

          # Start Qdrant container
          echo "Starting Qdrant..."
          docker run -d --name qdrant -p 6333:6333 qdrant/qdrant:v1.11.0

          # Start Ollama with model volume mounted
          echo "Starting Ollama..."
          docker run -d --name ollama \
            -p 11434:11434 \
            -v /tmp/ollama-models:/root/.ollama \
            -e OLLAMA_HOST=0.0.0.0 \
            ollama/ollama:0.3.12

          # Wait for services
          echo "Waiting for Qdrant..."
          timeout 120 bash -c 'until curl -f http://localhost:6333/healthz; do echo "  Qdrant not ready, waiting..."; sleep 2; done'
          echo "✅ Qdrant is ready!"

          echo "Waiting for Ollama..."
          timeout 180 bash -c 'until curl -f http://localhost:11434/api/tags; do echo "  Ollama not ready, waiting..."; sleep 5; done'
          echo "✅ Ollama is ready!"

          # Check if model is already cached
          if [ -f "/tmp/ollama-models/models/manifests/registry.ollama.ai/library/nomic-embed-text/latest" ]; then
            echo "✅ nomic-embed-text model found in cache"
          else
            echo "Pulling nomic-embed-text model..."
            curl -X POST http://localhost:11434/api/pull -d '{"name":"nomic-embed-text"}' --max-time 300
            echo "✅ Model pull completed"
          fi

      - name: Build if not cached
        run: |
          if [ ! -d "dist" ]; then
            echo "Build artifacts not found, building..."
            npm run build
          else
            echo "Build artifacts found in cache"
          fi

      - name: Run all tests with coverage and JUnit report
        run: |
          set +e  # Don't exit on non-zero exit codes from commands
          npm run test:coverage -- --reporter=junit --outputFile=test-report.junit.xml
          test_exit_code=$?
          set -e  # Re-enable exit on error
          
          # Check if tests actually failed (JUnit report will show failures)
          if [ -f test-report.junit.xml ]; then
            failures=$(grep -o 'failures="[0-9]*"' test-report.junit.xml | cut -d'"' -f2)
            errors=$(grep -o 'errors="[0-9]*"' test-report.junit.xml | cut -d'"' -f2)
            if [ "$failures" != "0" ] || [ "$errors" != "0" ]; then
              echo "Tests failed: $failures failures, $errors errors"
              exit 1
            else
              echo "All tests passed successfully"
              exit 0
            fi
          else
            echo "No test report found, using exit code: $test_exit_code"
            exit $test_exit_code
          fi
        timeout-minutes: 10
        env:
          QDRANT_ENDPOINT: http://localhost:6333
          OLLAMA_ENDPOINT: http://localhost:11434
          DIRECTORY_INDEXER_QDRANT_COLLECTION: directory-indexer-test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: alltests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Cleanup containers
        if: always()
        run: |
          docker stop qdrant ollama || true
          docker rm qdrant ollama || true

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate
