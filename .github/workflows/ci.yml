name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Fast checks first - run before heavy operations
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: lint-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check with clippy
      run: |
        # Check main library code with strict linting
        cargo clippy --lib --all-features -- -D warnings -D clippy::uninlined_format_args
        # Check other targets with standard linting (tests can be less strict)
        cargo clippy --bins --all-features -- -D warnings

  # Unit tests - no external services needed
  test-unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run unit tests
      run: cargo test --lib --test error_scenarios_tests --test storage_tests

    - name: Build release
      run: cargo build --release

  # Integration tests - need services  
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 15
          --health-start-period 20s

      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        env:
          OLLAMA_HOST: 0.0.0.0
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 60s

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Wait for services
      run: |
        echo "Waiting for Qdrant..."
        timeout 60 bash -c 'until curl -f http://localhost:6333/health; do echo "  Qdrant not ready, waiting..."; sleep 2; done'
        echo "✅ Qdrant is ready!"
        
        echo "Waiting for Ollama..."
        timeout 120 bash -c 'until curl -f http://localhost:11434/api/tags; do echo "  Ollama not ready, waiting..."; sleep 5; done'
        echo "✅ Ollama is ready!"

    - name: Setup Ollama model
      run: |
        # Pull the embedding model
        curl -X POST http://localhost:11434/api/pull -d '{"name":"nomic-embed-text"}' || echo "Model pull failed, but continuing..."
        sleep 10

    - name: Run integration tests
      run: |
        cargo test --test cli_integration_tests --test connectivity_tests --test integration_tests --test mcp_integration_tests
      env:
        QDRANT_URL: http://localhost:6333
        OLLAMA_ENDPOINT: http://localhost:11434

    - name: Test npm scripts
      run: npm test

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Code coverage - only run on successful tests
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 15
          --health-start-period 20s

      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        env:
          OLLAMA_HOST: 0.0.0.0
        options: >-
          --health-cmd "curl -f http://localhost:11434/api/tags || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 60s
    
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: coverage-${{ hashFiles('**/Cargo.lock') }}

    - name: Wait for services
      run: |
        echo "Waiting for Qdrant..."
        timeout 60 bash -c 'until curl -f http://localhost:6333/health; do echo "  Qdrant not ready, waiting..."; sleep 2; done'
        echo "✅ Qdrant is ready!"
        
        echo "Waiting for Ollama..."
        timeout 120 bash -c 'until curl -f http://localhost:11434/api/tags; do echo "  Ollama not ready, waiting..."; sleep 5; done'
        echo "✅ Ollama is ready!"

    - name: Setup Ollama model
      run: |
        curl -X POST http://localhost:11434/api/pull -d '{"name":"nomic-embed-text"}' || echo "Model pull failed, but continuing..."
        sleep 10

    - name: Generate code coverage
      run: cargo llvm-cov --lib --lcov --output-path lcov.info
      env:
        QDRANT_URL: http://localhost:6333
        OLLAMA_ENDPOINT: http://localhost:11434

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: false