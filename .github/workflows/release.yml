name: Release (NPM Release)

on:
  push:
    tags:
      - "v*"

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate tag version matches package.json
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/v}"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "  Tag version: $TAG_VERSION"
            echo "  Package version: $PACKAGE_VERSION"
            echo "  Please ensure the git tag matches the version in package.json"
            exit 1
          fi
          
          echo "✅ Version validation passed: $TAG_VERSION"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate-version

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Cache Docker images and Ollama models
        uses: actions/cache@v4
        with:
          path: |
            /tmp/docker-cache
            /tmp/ollama-models
          key: integration-cache-${{ hashFiles('.github/workflows/release.yml') }}-v2
          restore-keys: |
            integration-cache-

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Setup services for integration tests
        run: |
          # Create directories for caching
          mkdir -p /tmp/docker-cache /tmp/ollama-models

          # Pull Docker images (will use Docker's built-in layer cache)
          echo "Pulling Docker images..."
          docker pull qdrant/qdrant:v1.11.0 &
          docker pull ollama/ollama:0.3.12 &
          wait
          echo "✅ Docker images ready"

          # Start Qdrant container
          echo "Starting Qdrant..."
          docker run -d --name qdrant -p 6333:6333 qdrant/qdrant:v1.11.0

          # Start Ollama with model volume mounted
          echo "Starting Ollama..."
          docker run -d --name ollama \
            -p 11434:11434 \
            -v /tmp/ollama-models:/root/.ollama \
            -e OLLAMA_HOST=0.0.0.0 \
            ollama/ollama:0.3.12

          # Wait for services
          echo "Waiting for Qdrant..."
          timeout 120 bash -c 'until curl -f http://localhost:6333/healthz; do echo "  Qdrant not ready, waiting..."; sleep 2; done'
          echo "✅ Qdrant is ready!"

          echo "Waiting for Ollama..."
          timeout 180 bash -c 'until curl -f http://localhost:11434/api/tags; do echo "  Ollama not ready, waiting..."; sleep 5; done'
          echo "✅ Ollama is ready!"

          # Check if model is already cached
          if [ -f "/tmp/ollama-models/models/manifests/registry.ollama.ai/library/nomic-embed-text/latest" ]; then
            echo "✅ nomic-embed-text model found in cache"
          else
            echo "Pulling nomic-embed-text model..."
            curl -X POST http://localhost:11434/api/pull -d '{"name":"nomic-embed-text"}' --max-time 300
            echo "✅ Model pull completed"
          fi

      - name: Run all tests
        run: npm test
        env:
          QDRANT_ENDPOINT: http://127.0.0.1:6333
          OLLAMA_ENDPOINT: http://127.0.0.1:11434

      - name: Cleanup containers
        if: always()
        run: |
          docker stop qdrant ollama || true
          docker rm qdrant ollama || true

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release v${{ steps.version.outputs.VERSION }}
          generateReleaseNotes: true
          draft: false
          prerelease: false

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: npm
      url: https://www.npmjs.com/package/directory-indexer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Verify package contents
        run: npm pack --dry-run

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
