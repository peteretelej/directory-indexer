name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: false
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: false
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            cross: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Cache Cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p binaries
        cp target/${{ matrix.target }}/release/directory-indexer binaries/directory-indexer-${{ matrix.target }}
        chmod +x binaries/directory-indexer-${{ matrix.target }}

    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir binaries
        cp target/${{ matrix.target }}/release/directory-indexer.exe binaries/directory-indexer-${{ matrix.target }}.exe

    - name: Upload binary to release (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: binaries/directory-indexer-${{ matrix.target }}
        asset_name: directory-indexer-${{ matrix.target }}
        asset_content_type: application/octet-stream

    - name: Upload binary to release (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: binaries/directory-indexer-${{ matrix.target }}.exe
        asset_name: directory-indexer-${{ matrix.target }}.exe
        asset_content_type: application/octet-stream

    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.target }}
        path: binaries/

  npm-publish:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [create-release, build]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Download all binary artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Organize binaries
      run: |
        mkdir -p binaries
        find artifacts/ -name "directory-indexer-*" -exec cp {} binaries/ \;
        ls -la binaries/

    - name: Install dependencies
      run: npm ci

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update package.json version
      run: |
        npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version

    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker-publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4

    - name: Download Linux binary
      uses: actions/download-artifact@v3
      with:
        name: binaries-x86_64-unknown-linux-gnu
        path: binaries/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          peteretelej/directory-indexer:latest
          peteretelej/directory-indexer:${{ steps.get_version.outputs.VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max